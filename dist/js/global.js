(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"C:\\projects\\FlickrPhotoStream\\src\\js\\global.js":[function(require,module,exports){
"use strict";

//Global variables
var APIKey = "7a7585ce79a90f3c553261c9b42727d6",
    flickrURL = "https://api.flickr.com/services/rest/";

//Getting the photo information
function updatePhotoDescriptionAsync(photoId, photoDescription) {
	var deferred = $.Deferred();

	$.ajax({
		url: flickrURL,
		data: {
			method: "flickr.photos.getInfo",
			api_key: APIKey,
			photo_id: photoId,
			format: "json",
			nojsoncallback: 1
		}
	}).done(function (response) {
		//if there isnt any information display error message
		if (!response || !response.photo || !response.photo.description || !response.photo.description._content) {
			photoDescription.html('No description avaliable for this image.');
			return;
		}

		//Adding any descriptions
		photoDescription.html($.trim(response.photo.description._content));

		deferred.resolve();
	}).fail(function (error) {
		deferred.reject(error);
	});

	return deferred.promise();
}

//Getting the tag information
function updateTagsAsync(photoId, tags, tagWrapper) {
	var deferred = $.Deferred();

	$.ajax({
		url: flickrURL,
		data: {
			method: "flickr.photos.getInfo",
			api_key: APIKey,
			photo_id: photoId,
			format: "json",
			nojsoncallback: 1
		}
	}).done(function (response) {
		//finding the tags associated with the specific image and adding them to an array
		for (var i = 0; i < response.photo.tags.tag.length; i++) {
			tags.push($.trim(response.photo.tags.tag[i].raw));
		}

		//if there is anything in the array create a string
		if (response.photo.tags.tag.length >= 1) {
			tagWrapper.append('Tags: ');
			tagWrapper.append(tags.join(", "));
		}
		//else return missing text
		else {
				tagWrapper.append('Tags: No Tags associated with this image.');
			}

		deferred.resolve();
	}).fail(function (error) {
		deferred.reject(error);
	});

	return deferred.promise();
}

//Getting the author information
function updateAuthorInfoAsync(userId, author) {
	var deferred = $.Deferred();

	$.ajax({
		url: "https://api.flickr.com/services/rest/",
		data: {
			method: "flickr.people.getInfo",
			api_key: "dbe4f7bffc862bf1cf1b667faf03a226",
			user_id: userId,
			format: "json",
			nojsoncallback: 1
		}
	}).done(function (response) {
		//Checking if the username exists on the image
		if (!response || !response.person || !response.person.username || !response.person.username._content) {
			author.html('No username avaliable for this image');
			return;
		}
		//Setting the username
		author.html($.trim(response.person.username._content));

		deferred.resolve();
	}).fail(function (error) {
		deferred.reject(error);
	});

	return deferred.promise();
}

$(function () {
	$.ajax({
		url: flickrURL,
		data: {
			method: "flickr.photos.getRecent",
			api_key: APIKey,
			isfamily: 1,
			safe_search: 1,
			format: "json",
			nojsoncallback: 1
		},
		success: function success(response) {

			$.each(response.photos.photo, function (index, value) {
				//All the variables needed to build up the grid.
				var wrapper = $('<section>'),
				    content = $('<article>'),
				    imageWrapper = $('<figure>'),
				    header = $('<header>'),
				    author = $("<span class='author'>"),
				    tagWrapper = $("<span class='tag_wrapper'>"),
				    photoDescription = $("<p/>"),
				    photoURL = 'https://farm' + value.farm + '.staticflickr.com/' + value.server + '/' + value.id + '_' + value.secret + '.jpg',
				    imageLink = $("<a class='image_link'>").attr({ href: photoURL }),
				    img = $('<img>').attr({ src: photoURL }),
				    owner = 'https://www.flickr.com/photos/' + value.owner,
				    ownerURL = $('<a>').attr({ href: owner }),
				    title = value.title,
				    tags = [];

				//Get the description from each photo
				updatePhotoDescriptionAsync(value.id, photoDescription);
				//Get the author from each photo
				updateAuthorInfoAsync(value.owner, author);
				//Get the tags from each photo
				updateTagsAsync(value.id, tags, tagWrapper);

				//Add the image to the image wrapper
				imageWrapper.append(img);

				//Adding each individual item to the content wrapper
				content.append(header);
				content.append(photoDescription);
				content.append(tagWrapper);

				//Adding the author and the image title
				header.append(imageLink);
				imageLink.append(title);
				header.append("<span class='filler_text'> by </span>");
				header.append(ownerURL);
				ownerURL.append(author);

				//Adding it all together
				wrapper.append(imageWrapper);
				wrapper.append(content);

				//putting it onto the page
				$("#gallery").append(wrapper);
			});
		}
	});
});

},{}]},{},["C:\\projects\\FlickrPhotoStream\\src\\js\\global.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvZ2xvYmFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQTtBQUNBLElBQUksU0FBUyxrQ0FBYjtBQUFBLElBQ0MsWUFBWSx1Q0FEYjs7QUFHQTtBQUNBLFNBQVMsMkJBQVQsQ0FBcUMsT0FBckMsRUFBOEMsZ0JBQTlDLEVBQWdFO0FBQy9ELEtBQ0MsV0FBVyxFQUFFLFFBQUYsRUFEWjs7QUFHQSxHQUFFLElBQUYsQ0FBTztBQUNOLE9BQUssU0FEQztBQUVOLFFBQU07QUFDTCxXQUFRLHVCQURIO0FBRUwsWUFBUyxNQUZKO0FBR0wsYUFBVSxPQUhMO0FBSUwsV0FBUSxNQUpIO0FBS0wsbUJBQWdCO0FBTFg7QUFGQSxFQUFQLEVBVUMsSUFWRCxDQVVNLFVBQVUsUUFBVixFQUFvQjtBQUN6QjtBQUNBLE1BQUksQ0FBQyxRQUFELElBQWEsQ0FBQyxTQUFTLEtBQXZCLElBQWdDLENBQUMsU0FBUyxLQUFULENBQWUsV0FBaEQsSUFBK0QsQ0FBQyxTQUFTLEtBQVQsQ0FBZSxXQUFmLENBQTJCLFFBQS9GLEVBQTBHO0FBQ3pHLG9CQUFpQixJQUFqQixDQUFzQiwwQ0FBdEI7QUFDQTtBQUNBOztBQUVEO0FBQ0csbUJBQWlCLElBQWpCLENBQXNCLEVBQUUsSUFBRixDQUFPLFNBQVMsS0FBVCxDQUFlLFdBQWYsQ0FBMkIsUUFBbEMsQ0FBdEI7O0FBRUgsV0FBUyxPQUFUO0FBQ0EsRUFyQkQsRUFzQkMsSUF0QkQsQ0FzQk0sVUFBVSxLQUFWLEVBQWdCO0FBQ3JCLFdBQVMsTUFBVCxDQUFnQixLQUFoQjtBQUNBLEVBeEJEOztBQTBCQSxRQUFPLFNBQVMsT0FBVCxFQUFQO0FBQ0E7O0FBRUQ7QUFDQSxTQUFTLGVBQVQsQ0FBeUIsT0FBekIsRUFBa0MsSUFBbEMsRUFBd0MsVUFBeEMsRUFBb0Q7QUFDbkQsS0FDQyxXQUFXLEVBQUUsUUFBRixFQURaOztBQUdBLEdBQUUs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Q0FBcUIsT0FBckI7QUFDTSxJQTdDRDtBQThDSDtBQTFERSxFQUFQO0FBNERBLENBN0REIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLy9HbG9iYWwgdmFyaWFibGVzXHJcbnZhciBBUElLZXkgPSBcIjdhNzU4NWNlNzlhOTBmM2M1NTMyNjFjOWI0MjcyN2Q2XCIsXHJcblx0ZmxpY2tyVVJMID0gXCJodHRwczovL2FwaS5mbGlja3IuY29tL3NlcnZpY2VzL3Jlc3QvXCI7XHJcblxyXG4vL0dldHRpbmcgdGhlIHBob3RvIGluZm9ybWF0aW9uXHJcbmZ1bmN0aW9uIHVwZGF0ZVBob3RvRGVzY3JpcHRpb25Bc3luYyhwaG90b0lkLCBwaG90b0Rlc2NyaXB0aW9uKSB7XHJcblx0dmFyXHJcblx0XHRkZWZlcnJlZCA9ICQuRGVmZXJyZWQoKTtcclxuXHJcblx0JC5hamF4KHtcclxuXHRcdHVybDogZmxpY2tyVVJMLFxyXG5cdFx0ZGF0YToge1xyXG5cdFx0XHRtZXRob2Q6IFwiZmxpY2tyLnBob3Rvcy5nZXRJbmZvXCIsXHJcblx0XHRcdGFwaV9rZXk6IEFQSUtleSxcclxuXHRcdFx0cGhvdG9faWQ6IHBob3RvSWQsXHJcblx0XHRcdGZvcm1hdDogXCJqc29uXCIsXHJcblx0XHRcdG5vanNvbmNhbGxiYWNrOiAxXHJcblx0XHR9XHJcblx0fSlcclxuXHQuZG9uZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHRcdC8vaWYgdGhlcmUgaXNudCBhbnkgaW5mb3JtYXRpb24gZGlzcGxheSBlcnJvciBtZXNzYWdlXHJcblx0XHRpZiAoIXJlc3BvbnNlIHx8ICFyZXNwb25zZS5waG90byB8fCAhcmVzcG9uc2UucGhvdG8uZGVzY3JpcHRpb24gfHwgIXJlc3BvbnNlLnBob3RvLmRlc2NyaXB0aW9uLl9jb250ZW50ICkge1xyXG5cdFx0XHRwaG90b0Rlc2NyaXB0aW9uLmh0bWwoJ05vIGRlc2NyaXB0aW9uIGF2YWxpYWJsZSBmb3IgdGhpcyBpbWFnZS4nKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vQWRkaW5nIGFueSBkZXNjcmlwdGlvbnNcclxuICAgIFx0cGhvdG9EZXNjcmlwdGlvbi5odG1sKCQudHJpbShyZXNwb25zZS5waG90by5kZXNjcmlwdGlvbi5fY29udGVudCkpO1xyXG5cclxuXHRcdGRlZmVycmVkLnJlc29sdmUoKTtcclxuXHR9KVxyXG5cdC5mYWlsKGZ1bmN0aW9uIChlcnJvcil7XHJcblx0XHRkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xyXG5cdH0pO1xyXG5cclxuXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xyXG59XHJcblxyXG4vL0dldHRpbmcgdGhlIHRhZyBpbmZvcm1hdGlvblxyXG5mdW5jdGlvbiB1cGRhdGVUYWdzQXN5bmMocGhvdG9JZCwgdGFncywgdGFnV3JhcHBlcikge1xyXG5cdHZhclxyXG5cdFx0ZGVmZXJyZWQgPSAkLkRlZmVycmVkKCk7XHJcblxyXG5cdCQuYWpheCh7XHJcblx0XHR1cmw6IGZsaWNrclVSTCxcclxuXHRcdGRhdGE6IHtcclxuXHRcdFx0bWV0aG9kOiBcImZsaWNrci5waG90b3MuZ2V0SW5mb1wiLFxyXG5cdFx0XHRhcGlfa2V5OiBBUElLZXksXHJcblx0XHRcdHBob3RvX2lkOiBwaG90b0lkLFxyXG5cdFx0XHRmb3JtYXQ6IFwianNvblwiLFxyXG5cdFx0XHRub2pzb25jYWxsYmFjazogMVxyXG5cdFx0fVxyXG5cdH0pXHJcblx0LmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHQvL2ZpbmRpbmcgdGhlIHRhZ3MgYXNzb2NpYXRlZCB3aXRoIHRoZSBzcGVjaWZpYyBpbWFnZSBhbmQgYWRkaW5nIHRoZW0gdG8gYW4gYXJyYXlcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcG9uc2UucGhvdG8udGFncy50YWcubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dGFncy5wdXNoKCQudHJpbShyZXNwb25zZS5waG90by50YWdzLnRhZ1tpXS5yYXcpKTtcclxuXHRcdH1cclxuXHJcblx0XHQvL2lmIHRoZXJlIGlzIGFueXRoaW5nIGluIHRoZSBhcnJheSBjcmVhdGUgYSBzdHJpbmdcclxuXHRcdGlmKHJlc3BvbnNlLnBob3RvLnRhZ3MudGFnLmxlbmd0aCA+PSAxKSB7XHJcblx0ICAgIFx0dGFnV3JhcHBlci5hcHBlbmQoJ1RhZ3M6ICcpO1xyXG5cdCAgICBcdHRhZ1dyYXBwZXIuYXBwZW5kKHRhZ3Muam9pbihcIiwgXCIpKTtcclxuXHQgICAgfVxyXG5cdCAgICAvL2Vsc2UgcmV0dXJuIG1pc3NpbmcgdGV4dFxyXG5cdCAgICBlbHNlIHtcclxuXHQgICAgXHR0YWdXcmFwcGVyLmFwcGVuZCgnVGFnczogTm8gVGFncyBhc3NvY2lhdGVkIHdpdGggdGhpcyBpbWFnZS4nKTtcclxuXHQgICAgfVxyXG5cclxuXHRcdGRlZmVycmVkLnJlc29sdmUoKTtcclxuXHR9KVxyXG5cdC5mYWlsKGZ1bmN0aW9uIChlcnJvcil7XHJcblx0XHRkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xyXG5cdH0pO1xyXG5cclxuXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xyXG59XHJcblxyXG4vL0dldHRpbmcgdGhlIGF1dGhvciBpbmZvcm1hdGlvblxyXG5mdW5jdGlvbiB1cGRhdGVBdXRob3JJbmZvQXN5bmModXNlcklkLCBhdXRob3IpIHtcclxuXHR2YXJcclxuXHRcdGRlZmVycmVkID0gJC5EZWZlcnJlZCgpO1xyXG5cclxuXHQkLmFqYXgoe1xyXG5cdFx0dXJsOiBcImh0dHBzOi8vYXBpLmZsaWNrci5jb20vc2VydmljZXMvcmVzdC9cIixcclxuXHRcdGRhdGE6IHtcclxuXHRcdFx0bWV0aG9kOiBcImZsaWNrci5wZW9wbGUuZ2V0SW5mb1wiLFxyXG5cdFx0XHRhcGlfa2V5OiBcImRiZTRmN2JmZmM4NjJiZjFjZjFiNjY3ZmFmMDNhMjI2XCIsXHJcblx0XHRcdHVzZXJfaWQ6IHVzZXJJZCxcclxuXHRcdFx0Zm9ybWF0OiBcImpzb25cIixcclxuXHRcdFx0bm9qc29uY2FsbGJhY2s6IDFcclxuXHRcdH1cclxuXHR9KVxyXG5cdC5kb25lKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdFx0Ly9DaGVja2luZyBpZiB0aGUgdXNlcm5hbWUgZXhpc3RzIG9uIHRoZSBpbWFnZVxyXG5cdFx0aWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2UucGVyc29uIHx8ICFyZXNwb25zZS5wZXJzb24udXNlcm5hbWUgfHwgIXJlc3BvbnNlLnBlcnNvbi51c2VybmFtZS5fY29udGVudCkge1xyXG5cdFx0XHRhdXRob3IuaHRtbCgnTm8gdXNlcm5hbWUgYXZhbGlhYmxlIGZvciB0aGlzIGltYWdlJyk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdC8vU2V0dGluZyB0aGUgdXNlcm5hbWVcclxuICAgIFx0YXV0aG9yLmh0bWwoJC50cmltKHJlc3BvbnNlLnBlcnNvbi51c2VybmFtZS5fY29udGVudCkpO1xyXG5cclxuXHRcdGRlZmVycmVkLnJlc29sdmUoKTtcclxuXHR9KVxyXG5cdC5mYWlsKGZ1bmN0aW9uIChlcnJvcil7XHJcblx0XHRkZWZlcnJlZC5yZWplY3QoZXJyb3IpO1xyXG5cdH0pO1xyXG5cclxuXHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xyXG59XHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuXHQkLmFqYXgoe1xyXG5cdCAgICB1cmw6IGZsaWNrclVSTCxcclxuXHQgICAgZGF0YToge1xyXG5cdCAgICAgICAgbWV0aG9kOiBcImZsaWNrci5waG90b3MuZ2V0UmVjZW50XCIsXHJcblx0ICAgICAgICBhcGlfa2V5OiBBUElLZXksXHJcblx0ICAgICAgICBpc2ZhbWlseTogMSxcclxuXHQgICAgICAgIHNhZmVfc2VhcmNoOiAxLFxyXG5cdCAgICAgICAgZm9ybWF0OiBcImpzb25cIixcclxuXHQgICAgICAgIG5vanNvbmNhbGxiYWNrOiAxXHJcblx0ICAgIH0sXHJcblx0ICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cclxuXHQgICAgICAgICQuZWFjaChyZXNwb25zZS5waG90b3MucGhvdG8sIGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcclxuXHQgICAgICAgIFx0Ly9BbGwgdGhlIHZhcmlhYmxlcyBuZWVkZWQgdG8gYnVpbGQgdXAgdGhlIGdyaWQuXHJcblx0XHRcdFx0dmFyIHdyYXBwZXIgPSAkKCc8c2VjdGlvbj4nKSxcclxuXHRcdFx0XHRcdGNvbnRlbnQgPSAkKCc8YXJ0aWNsZT4nKSxcclxuXHRcdFx0XHRcdGltYWdlV3JhcHBlciA9ICQoJzxmaWd1cmU+JyksXHJcblx0XHRcdFx0XHRoZWFkZXIgPSAkKCc8aGVhZGVyPicpLFxyXG5cdFx0XHRcdFx0YXV0aG9yID0gJChcIjxzcGFuIGNsYXNzPSdhdXRob3InPlwiKSxcclxuXHRcdFx0XHRcdHRhZ1dyYXBwZXIgPSAkKFwiPHNwYW4gY2xhc3M9J3RhZ193cmFwcGVyJz5cIiksXHJcblx0XHRcdFx0XHRwaG90b0Rlc2NyaXB0aW9uID0gJChcIjxwLz5cIiksXHJcblx0XHRcdFx0XHRwaG90b1VSTCA9ICdodHRwczovL2Zhcm0nICsgdmFsdWUuZmFybSArICcuc3RhdGljZmxpY2tyLmNvbS8nICsgdmFsdWUuc2VydmVyICsgJy8nICsgdmFsdWUuaWQgKyAnXycgKyB2YWx1ZS5zZWNyZXQgKyAnLmpwZycsXHJcblx0XHRcdFx0XHRpbWFnZUxpbmsgPSAkKFwiPGEgY2xhc3M9J2ltYWdlX2xpbmsnPlwiKS5hdHRyKHtocmVmOiBwaG90b1VSTH0pLFxyXG5cdFx0XHRcdFx0aW1nID0gJCgnPGltZz4nKS5hdHRyKHtzcmM6IHBob3RvVVJMfSksXHJcblx0XHRcdFx0XHRvd25lciA9ICdodHRwczovL3d3dy5mbGlja3IuY29tL3Bob3Rvcy8nICsgdmFsdWUub3duZXIsXHJcblx0XHRcdFx0XHRvd25lclVSTCA9ICQoJzxhPicpLmF0dHIoe2hyZWY6IG93bmVyfSksXHJcblx0XHRcdFx0XHR0aXRsZSA9IHZhbHVlLnRpdGxlLFxyXG5cdFx0XHRcdFx0dGFncyA9IFtdO1xyXG5cclxuXHRcdFx0XHQvL0dldCB0aGUgZGVzY3JpcHRpb24gZnJvbSBlYWNoIHBob3RvXHJcblx0XHRcdFx0dXBkYXRlUGhvdG9EZXNjcmlwdGlvbkFzeW5jKHZhbHVlLmlkLCBwaG90b0Rlc2NyaXB0aW9uKTtcclxuXHRcdFx0XHQvL0dldCB0aGUgYXV0aG9yIGZyb20gZWFjaCBwaG90b1xyXG5cdFx0XHRcdHVwZGF0ZUF1dGhvckluZm9Bc3luYyh2YWx1ZS5vd25lciwgYXV0aG9yKTtcclxuXHRcdFx0XHQvL0dldCB0aGUgdGFncyBmcm9tIGVhY2ggcGhvdG9cclxuXHRcdFx0XHR1cGRhdGVUYWdzQXN5bmModmFsdWUuaWQsIHRhZ3MsIHRhZ1dyYXBwZXIpO1xyXG5cclxuXHRcdFx0XHQvL0FkZCB0aGUgaW1hZ2UgdG8gdGhlIGltYWdlIHdyYXBwZXJcclxuXHRcdFx0XHRpbWFnZVdyYXBwZXIuYXBwZW5kKGltZyk7XHJcblxyXG5cdFx0XHRcdC8vQWRkaW5nIGVhY2ggaW5kaXZpZHVhbCBpdGVtIHRvIHRoZSBjb250ZW50IHdyYXBwZXJcclxuXHRcdFx0XHRjb250ZW50LmFwcGVuZChoZWFkZXIpO1xyXG5cdFx0XHRcdGNvbnRlbnQuYXBwZW5kKHBob3RvRGVzY3JpcHRpb24pO1xyXG5cdFx0XHRcdGNvbnRlbnQuYXBwZW5kKHRhZ1dyYXBwZXIpO1xyXG5cclxuXHRcdFx0XHQvL0FkZGluZyB0aGUgYXV0aG9yIGFuZCB0aGUgaW1hZ2UgdGl0bGVcclxuXHRcdFx0XHRoZWFkZXIuYXBwZW5kKGltYWdlTGluayk7XHJcblx0XHRcdFx0aW1hZ2VMaW5rLmFwcGVuZCh0aXRsZSk7XHJcblx0XHRcdFx0aGVhZGVyLmFwcGVuZChcIjxzcGFuIGNsYXNzPSdmaWxsZXJfdGV4dCc+IGJ5IDwvc3Bhbj5cIik7XHJcblx0XHRcdFx0aGVhZGVyLmFwcGVuZChvd25lclVSTCk7XHJcblx0XHRcdFx0b3duZXJVUkwuYXBwZW5kKGF1dGhvcik7XHJcblxyXG5cdFx0XHRcdC8vQWRkaW5nIGl0IGFsbCB0b2dldGhlclxyXG4gICAgICAgICAgICBcdHdyYXBwZXIuYXBwZW5kKGltYWdlV3JhcHBlcik7XHJcblx0XHRcdFx0d3JhcHBlci5hcHBlbmQoY29udGVudCk7XHJcblxyXG5cdFx0XHRcdC8vcHV0dGluZyBpdCBvbnRvIHRoZSBwYWdlXHJcblx0XHRcdFx0JChcIiNnYWxsZXJ5XCIpLmFwcGVuZCh3cmFwcGVyKTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICB9XHJcblx0fSk7XHJcbn0pIl19
